import { useState, useEffect, useCallback, useMemo } from "react";
import axios from "axios";
import { API_URL } from "../lib/constants";
import { socket } from "../context/SocketContext";

const useApiData = (endpoint, initialData = []) => {
    const [data, setData] = useState(initialData);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    // –¢–æ–∫–µ–Ω —á–∏—Ç–∞—î—Ç—å—Å—è —Ç—É—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø—É –≤ useEffect
    const token = localStorage.getItem("authToken");

    const getAuthConfig = useCallback(() => {
        if (token) {
            return {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            };
        }
        return {};
    }, [token]);

    const sendRequest = async (method, path, payload = null) => {
        setError(null);
        const config = getAuthConfig();
        const upperMethod = method.toUpperCase();

        try {
            const url = `${API_URL}${path}`;
            let response;

            // ... (SWITCH: POST/PUT/DELETE) ...
            switch (upperMethod) {
                case "POST":
                    response = await axios.post(url, payload, config);
                    break;
                case "PUT":
                    response = await axios.put(url, payload, config);
                    break;
                case "DELETE":
                    response = await axios.delete(url, config);
                    break;
                default:
                    throw new Error(`Unsupported method: ${method}`);
            }

            if (
                response.status >= 200 &&
                response.status < 300 &&
                (upperMethod === "POST" ||
                    upperMethod === "PUT" ||
                    upperMethod === "DELETE")
            ) {
                // ‚úÖ –ó–∞–ª–∏—à–∞—î–º–æ –ª–æ–≥, –∞–ª–µ –∑–Ω–∞—î–º–æ, —â–æ Socket.IO –∑—Ä–æ–±–∏—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                console.log(
                    `[useApiData] Successful ${upperMethod}. Real-time update expected from server.`,
                );
            }
            return response;
        } catch (err) {
            console.error(`Error ${method}ing data:`, err);
            setError(err);
            throw err;
        }
    };

    // fetchData —Ç–∞–∫–æ–∂ –ø–æ—Ç—Ä–µ–±—É—î getAuthConfig, —Ç–æ–º—É —î –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å.
    const fetchData = useCallback(
        async (customEndpoint = endpoint) => {
            setLoading(true);
            setError(null);
            const config = getAuthConfig();
            try {
                const response = await axios.get(
                    `${API_URL}${customEndpoint}`,
                    config,
                );
                setData(response.data);
            } catch (err) {
                setError(err);
            } finally {
                setLoading(false);
            }
        },
        [endpoint, getAuthConfig],
    );

    // ====================================================================
    // SOCKET.IO LOGIC
    // ====================================================================
// --- 1. –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ç–∞ —ñ–º–µ–Ω (–°–¢–ê–ë–Ü–õ–Ü–ó–ê–¶–Ü–Ø) ---
    const { resourceType, eventName, reqQuery } = useMemo(() => {
        const [path, queryString] = endpoint.split('?');
        const rType = path.substring(1).split('/')[0];
        
        const query = {};
        if (queryString) {
            new URLSearchParams(queryString).forEach((value, key) => {
                query[key] = value;
            });
        }

        return {
            resourceType: rType,
            eventName: rType,
            reqQuery: query,
        };
    }, [endpoint]); // ‚úÖ –ó–∞–ª–µ–∂–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ endpoint
    const handleResourceUpdate = useCallback(
        (updatedData) => {
            // –¢—É—Ç –ª–æ–≥—ñ–∫–∞, —è–∫–∞ –æ–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω
            console.log(`Real-time update received for ${resourceType}.`);
            setData(updatedData);
            setLoading(false);
        },
        [resourceType],
    ); // –ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ç–∏–ø—É —Ä–µ—Å—É—Ä—Å—É
    // ‚úÖ –í–∏–Ω–æ—Å–∏–º–æ joinRoom —É useCallback, —â–æ–± –≤—ñ–Ω –Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞–≤—Å—è –Ω–∞ –∫–æ–∂–Ω–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ
    const joinRoom = useCallback(() => {
        // üí° –¢–£–¢ –í–ò–ö–û–†–ò–°–¢–û–í–£–Æ–¢–¨–°–Ø –í–°–Ü –ù–ï–û–ë–•–Ü–î–ù–Ü –ó–ú–Ü–ù–ù–Ü
        socket.emit("join-user-room", { token, resourceType, reqQuery });
        console.log(
            `Socket.IO connected. Requesting room: ${resourceType} with query:`,
            reqQuery,
        );
    }, [token, resourceType, reqQuery]);

    useEffect(() => {
        if (!token) {
            setLoading(false);
            return;
        }

        // --- 3. –õ–æ–≥—ñ–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è ---

        if (!socket.connected) {
            socket.connect();
            setLoading(true);
            const initialJoin = () => {
                joinRoom();
                socket.off("connect", initialJoin); // –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø—É—Å–∫—É
            };
            socket.on("connect", initialJoin);
        } else {
            // ‚úÖ –Ø–ö–©–û –í–ñ–ï –ü–Ü–î–ö–õ–Æ–ß–ï–ù–û (–ù–∞–≤—ñ–≥–∞—Ü—ñ—è/–ó–º—ñ–Ω–∞ endpoint):
            // –í–∏–∫–ª–∏–∫–∞—î–º–æ joinRoom –Ω–∞–ø—Ä—è–º—É, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ connect.
            // –Ü–Ω–∞–∫—à–µ, socket.on("connect", joinRoom) –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ
            joinRoom();
            setLoading(true);
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å–ª—É—Ö–∞—á–∞ –¥–ª—è –¥–∞–Ω–∏—Ö (–ø—Ä–∞—Ü—é—î —ñ –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å)
        socket.on(eventName, handleResourceUpdate);

        // --- 4. –û—á–∏—â–µ–Ω–Ω—è ---
        return () => {
            // –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            socket.off("connect", joinRoom);
            socket.off(eventName, handleResourceUpdate);
        };
        // ‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: endpoint –∑–º—É—à—É—î –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∞—Ç–∏—Å—è –ø—Ä–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó. token - –ø—Ä–∏ –ª–æ–≥—ñ–Ω—ñ/–ª–æ–≥–∞—É—Ç—ñ.
    }, [token, eventName, joinRoom, handleResourceUpdate, endpoint]);

    return { data, loading, error, fetchData, sendRequest };
};

export default useApiData;
